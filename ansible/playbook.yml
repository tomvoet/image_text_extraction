- name: Deploy resources to google cloud
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    # - name: Ask for project id
    #   ansible.builtin.pause:
    #     prompt: "Enter the project id: "
    #   register: project_id
    #   when: project_id is not defined
    - name: Read service-account.json
      ansible.builtin.set_fact:
        service_account: "{{ lookup('ansible.builtin.file', '../service-account.json') | from_json }}"

    - name: Get current username
      local_action: command whoami
      register: username

    - name: Apply the terraform configuration
      community.general.terraform:
        project_path: "{{ playbook_dir }}/../terraform"
        state: present
        variables:
          project_id: "{{ service_account.project_id }}"
          user: "{{ username.stdout }}"
      register: deployed_tf
    
    - name: Save redis_instance_ip
      ansible.builtin.set_fact:
        redis_instance_ip: "{{ deployed_tf.outputs.redis_instance_ip.value }}"

    - name: Save host_vm_ip
      ansible.builtin.set_fact:
        host_vm_ip: "{{ deployed_tf.outputs.host_vm_ip.value }}"

    - name: Add host_vm to inventory
      ansible.builtin.add_host:
        name: "{{ host_vm_ip }}"
        groups: host-vm
 
- name: Install dependencies to vm instance
  hosts: host-vm
  become: true
  tasks:
    - ansible.builtin.include_tasks:
        file: tasks/dependencies.yml

- name: Deploy the application
  hosts: host-vm
  become: true
  vars:
    container_name: image_text_extraction
    container_image: ghcr.io/tomvoet/{{ container_name }}:latest
  tasks:
    - ansible.builtin.include_tasks:
       file: tasks/deployment.yml
  handlers:
    - name: Restart Service
      ansible.builtin.systemd:
        name: "{{ container_name }}"
        state: restarted


